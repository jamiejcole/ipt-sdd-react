year,qNum,qPart,Marks,1.5,syllabus,keywords,Outcome
2021,4,,1,1.5,9.1.1,Licences,H3.1
2021,21,,3,4.5,9.1.1 ,Protection against software piracy,"H2.2, H3.2"
2021,23,(a) ,2,3,9.1.1 ,Responsibilities of developers,H3.1
2021,25,(a) ,2,3,9.1.1 ,Social and ethical issues,H3.1
2020,17,,1,1.5,9.1.1,Decompilation,"H3.1, H4.2"
2020,21,(a) ,3,4.5,9.1.1 ,Social issues,H3.1
2019,22,,3,4.5,9.1.1,Software market  dominant players,H3.1
2019,27,(a) ,3,4.5,"9.1.1, 9.2.1",Scenario  travel company Meeting client needs,H4.1
2018,5,,1,1.5,9.1.1,Code of conduct,H3.1 
2018,6,,1,1.5,9.1.1 ,Software licence ,H3.2
2018,21,(a) ,3,4.5,9.1.1 ,Relevant social/ethical issues,H3.1
2017,5,,1,1.5,9.1.1 ,Licences ,H3.1
2017,33,(a) ,3,4.5,9.1.1,Responsibility of developer ,H3.1
2016,1,,1,1.5,9.1.1 ,Software piracy ,H3.1 
2016,2,,1,1.5,9.1.1 ,Reverse engineering ,H3.1
2016,21,,2,3,9.1.1 ,Use of networks in software development ,H2.2 
2016,22,,3,4.5,9.1.1 ,Response times ,H2.2
2015,4,,1,1.5,9.1.1,Intellectual property ,H3.1
2015,7,,1,1.5,9.1.1 ,Inclusivity,H3.2
2015,15,,1,1.5,9.1.1 ,Reverse engineering ,H3.1
2015,25,,3,4.5,9.1.1 ,Software market ,H3.1
2014,1,,1,1.5,9.1.1 ,Cyber safety,H3.1
2014,2,,1,1.5,9.1.1,Ergonomics,H3.2
2014,12,,1,1.5,9.1.1 ,decompilation,H3.1
2014,21,,4,6,9.1.1 ,legal action,H3.1
2014,26,(a),3,4.5,"9.1.1, 9.1.2",responsibility of the developer,H2.2
2013,4,,1,1.5,9.1.1,software piracy,H2.2
2013,5,,1,1.5,9.1.1,Millennium Bug,H2.2
2013,11,,1,1.5,9.1.1,licence,H3.1
2013,22,(a),4,6,9.1.1,Social and Ethical Issues,"H2.2, H3.1"
2013,23,,3,4.5,9.1.1,computer networks to support the development of software,H2.2
2012,5,,1,1.5,9.1.1,software piracy,H3.1
2012,27,(a) ,3,4.5,9.1.1,cloud computing,"H2.2, H3.1"
2012,27,(b),3,4.5,9.1.1,technical considerations for developers,"H2.2, H3.1"
2011,1,,1,1.5,9.1.1,responsibility of the developer,H3.1
2011,24,(b),2,3,9.1.1,Social and Ethical Issues,"H2.2, H3.1"
2011,24,(c),3,4.5,9.1.1,rights and responsibilities of a developer,"H2.2, H3.1"
2011,27,(a) ,3,4.5,9.1.1,rights and responsibilities of a developer,H3.1
2010,5,,1,1.5,9.1.1,licensing,"H2.2, H3.1"
2021,23, (b),3,4.5,9.1.2,CASE tools,H5.3
2021,25, (b),2,3,9.1.2,Installation method,H1.2
2021,25, (c),3,4.5,9.1.2,Software development approach,H1.2
2020,2,,1,1.5,9.1.2,Software development approaches,H1.2
2020,21,(b),3,4.5,9.1.2,CASE tools,H1.2
2020,27,(a),3,4.5,9.1.2,Software development approach,H1.2
2019,1,,1,1.5,9.1.2,Approaches,H1.2
2019,3,,1,1.5,9.1.2,Outsourcing,H1.2
2019,5,,1,1.5,9.1.2,CASE tools,H1.2
2019,11,,1,1.5,9.1.2,Methods of installation,H1.2
2019,25, (a),3,4.5,9.1.2,Development approach,H1.2
2019,27,(c),3,4.5,"9.1.2, 9.3",Team of developers vs single developer,H6.3
2018,21,(b),3,4.5,9.1.2,Development approach,H4.2
2018,21,(c),3,4.5,9.1.2,Installation method,"H4.2, H1.2"
2017,1,,1,1.5,9.1.2,Approaches,H1.2
2017,23,(a),3,4.5,9.1.2,Installation,H1.2
2017,24,,3,4.5,9.1.2,CASE tools,H1.2
2017,27,,3,4.5,9.1.2,Emerging technologies,H2.2
2016,3,,1,1.5,9.1.2,Outsourcing,H1.2
2016,4,,1,1.5,9.1.2,Installation methods,H5.1
2016,5,,1,1.5,9.1.2,Use of CASE tools,H1.2
2016,29, (a),3,4.5,9.1.2,Scenario  development approach,H1.2
2016,29, (c),3,4.5,9.1.2,Scenario  social/ethical issues,H3.1
2015,8,,1,1.5,9.1.2,Implementation methods,H6.3
2015,27,,3,4.5,9.1.2,Trends in software development,H2.2
2015,28, (a),4,6,9.1.2,Development Approaches,H1.2
2014,9,,1,1.5,9.1.2,Installation,"H1.2, H4.2"
2014,26,(a),3,4.5,"9.1.1, 9.1.2",Outsourcing,H2.2
2013,25, (a),4,6,9.1.2,agile approach,"H4.2, H6.2"
2013,26,,3,4.5,9.1.2,installation method,H4.2
2012,18,,1,1.5,9.1.2,CASE tools,H1.2
2012,21,,3,4.5,9.1.2,pilot and phased installation methods,"H1.2, H5.1"
2012,25, (a),3,4.5,9.1.2,agile approach,"H1.2, H4.2"
2011,21,,4,6,9.1.2,CASE tools,"H4.2, H5.1"
2011,24, (a),3,4.5,9.1.2,COTS and Outsourcing,"H1.2, H2.2, H4.2"
2011,28, (b),3,4.5,9.1.2,implementation method,H1.2
2010,2,,1,1.5,9.1.2,Installation,H1.2
2010,10,,1,1.5,9.1.2,Approaches,"H1.2, H2.2"
2010,21,(d) (i),3,4.5,9.1.2,RAD & prototyping,H4.2
2021,1,,1,1.5,9.2.1,Development cycle stages,H4.1
2021,3,,1,1.5,9.2.1,Documentation,H5.2
2021,10,,1,1.5,9.2.1,Documentation,H5.2
2021,12,,1,1.5,9.2.1,Data types,H4.2
2021,23,(c),4,6,9.2.1,Data flow diagram,H5.2
2021,27,,3,4.5,9.2.1,Interpreting system flowchart,"H1.3, H5.2"
2020,1,,1,1.5,9.2.1,Data types,"H1.3, H4.2"
2020,4,,1,1.5,9.2.1,Development stages  boundaries,H4.1
2020,11,,1,1.5,9.2.1,Quality assurance,H1.3
2020,24,(c),4,6,9.2.1,Documentation  DFD,H5.2
2020,25,(b),3,4.5,9.2.1,Data dictionary,H5.2
2019,23,b(ii),3,4.5,"9.2.1, 9.2.2 ",Documentation  system flowchart,H5.2
2019,26,,4,6,9.2.1,Documentation  interpreting a structure chart,H5.2
2019,27,(a),3,4.5,"9.1.1, 9.2.1 ",Scenario  travel company Meeting client needs,H4.1
2018,7,,1,1.5,9.2.1,Data types - boolean/integer/(string),H4.2
2018,8,,1,1.5,9.2.1,Documentation (DFD),"H1.3, H6.2"
2018,23,(c),3,4.5,"9.2.1, 9.2.4",Testing / quality assurance,H4.3
2018,25,,3,4.5,9.2.1,Communication between developers and clients,"H5.1, H6.2"
2017,8,,1,1.5,9.2.1,Defining the problem ,"H3.2, H4.2"
2017,9,,1,1.5,9.2.1,Data types - array of booleans,H4.2
2017,10,,1,1.5,9.2.1,Quality criteria,"H3.2, H5.1"
2017,29,,3,4.5,9.2.1,System documentation - context digram,H5.2
2017,33,b(i),4,6,9.2.1,System documentation - IPO diagram,H5.3
2016,6,,1,1.5,9.2.1,Developer vs user perspective,H4.1
2016,10,,1,1.5,9.2.1,Data types - numeric,H4.2
2016,25,(c),3,4.5,"9.2.1, 9.3",Communication skills,H6.1
2015,1,,1,1.5,9.2.1,Needs of client,"H4.1, H6.1"
2015,3,,1,1.5,9.2.1,Documentation (DFD),H5.2
2015,28,(b),3,4.5,9.2.1,System modelling tool - storyboard,H6.4
2015,29,(c),4,6,9.2.1,Structure chart - create from algorithm,H6.3
2015,30,(a),2,3,9.2.1,Array of records,H4.2
2014,11,,1,1.5,9.2.1,systems modelling tools,"H1.3, H4.3"
2014,22,,3,4.5,9.2.1,storyboards and IPO diagrams,H5.2
2014,26,(b),3,4.5,9.2.1,communication between the user and the developer,"H5.2, H6.3"
2014,31,(c),4,6,9.2.1,Documentation (DFD),H5.2
2013,2,,1,1.5,9.2.1,system flowchart,H5.2
2013,7,,1,1.5,9.2.1,data type,H5.2
2013,9,,1,1.5,"9.2.1, 9.3",system modelling tools,H5.2
2013,24,(a),3,4.5,9.2.1,IPO diagram,H4.2
2013,30,(a),3,4.5,9.2.1,pseudocode,H4.2
2013,30,(b),3,4.5,"9.2.1, 9.2.3",specifications,"H5.2, H4.3"
2012,6,,1,1.5,9.2.1,system modelling tools,"H5.2, H6.2"
2012,7,,1,1.5,9.2.1,data dictionary,H5.2
2012,15,,1,1.5,9.2.1,data type,H1.2
2012,23,(a),4,6,"9.2.1, 9.2.2",storyboard,"H1.2, H4.2"
2012,23,(b),3,4.5,"9.2.1, 9.2.2, 9.3",data flow diagram,"H1.2, H4.2"
2012,25,(b),4,6,9.2.1,development approach,H4.1
2012,30,(a),2,3,"9.2.1, 9.2.3",logic error,H3.2
2011,10,,1,1.5,9.2.1,documentation,"H1.2, H5.2, H6.1"
2011,22,(a),4,6,"9.2.1, 9.2.2", data flow diagram,H5.2
2011,28,(a),3,4.5,9.2.1,feasibility,"H1.2, H4.1"
2010,7,,1,1.5,9.2.1,modelling tool,"H4.2, H5.2"
2010,16,,1,1.5,9.2.1,feasibility,H4.2
2021,2,,1,1.5,9.2.2,Screen elements,H6.4
2021,5,,1,1.5,9.2.2,Event-driven programming,H4.1
2021,6,,1,1.5,9.2.2,Sequential files,H1.3
2021,7,,1,1.5,9.2.2,Control structures,H4.3
2021,8,,1,1.5,9.2.2,Parameter passing ,H4.3
2021,13,,1,1.5,9.2.2,Output from flowchart,H4.2
2021,14,,1,1.5,9.2.2,Flowchart to pseudocode conversion,H4.3
2021,15,,1,1.5,9.2.2 ,Random number generator,H4.3
2021,19,,1,1.5,9.2.2 ,Desk checking,H4.2
2021,20,,1,1.5,9.2.2,Sorting,H4.2
2021,28,(a),3,4.5,9.2.2,Desk check,H4.2
2021,28,(b),2,3,9.2.2,Locate and fix errors,H5.1
2020,5,,1,1.5,9.2.2,Binary search,H4.2
2020,6,,1,1.5,9.2.2,Sorting,H4.2
2020,7,,1,1.5,9.2.2,Algorithm output,H4.2
2020,14,,1,1.5,9.2.2,Data structure,"H1.3, H4.2"
2020,15,,1,1.5,9.2.2,File handling,H4.2
2020,18,,1,1.5,9.2.2,Flowchart and pseudocode,H4.2
2020,24,(a),3,4.5,9.2.2,Design consistency,H6.3
2020,25,(c),3,4.5,9.2.2,File types,H4.2
2020,26,(a),2,3,9.2.2,Desk checking,H4.2
2019,6,,1,1.5,9.2.2 ,Data dictionary ,H5.2
2019,7,,1,1.5,9.2.2 ,Search/complete the algorithm,H4.2
2019,10,,1,1.5,9.2.2,Control structure (convert post-test to pre-test),H4.2
2019,13,,1,1.5,9.2.2,Converting documentation ,H5.2
2019,15,,1,1.5,9.2.2,Sequential vs relative files,H1.3
2019,16,,1,1.5,9.2.2,Local/global variables,H4.2
2019,18,,1,1.5,9.2.2,"Algorithm, random number generator",H4.2
2019,19,,1,1.5,9.2.2,Algorithm for data validation,H4.2
2019,20,,1,1.5,9.2.2,Sort,H4.2
2019,21,,3,4.5,9.2.2,Developing software for specific devices,H2.2
2019,23,a,2,3,9.2.2,Scenario  student enrolment Compare and contrast arrays and records,H4.2
2019,23,b(i),4,6,9.2.2,Documentation  screen design,"H6.4, H5.2"
2019,23,b(ii),3,4.5,"9.2.1, 9.2.2",Documentation  system flowchart,H5.2
2019,23,b(iii),3,4.5,9.2.2,Justification of search methods,H4.2
2019,24,a,2,3,9.2.2,Algorithm   desk check,H4.2
2019,24,b,3,4.5,9.2.2,Improving code efficiency,H4.2
2019,27,b,3,4.5,"9.2.2, 9.2.3",Choosing a programming language,H2.1
2019,28,,4,6,9.2.2,Algorithm based on subroutines provided,H4.2
2019,29,b,2,3,9.2.2,Algorithm - Fixing errors in subroutine,H4.2
2019,30,,5,7.5,9.2.2,Algorithm  processing 2D array,H4.2
2018,1,,1,1.5,9.2.2,Output from code fragment,H4.2
2018,9,,1,1.5,9.2.2,Interface design elements,H6.4
2018,11,,1,1.5,"9.2.2, 9.2.4",Benchmarking,H4.2
2018,13,,1,1.5,9.2.2,Searches,"H4.1, H4.2"
2018,14,,1,1.5,9.2.2,Algorithm (flowchart to pseudocode),H4.2
2018,18,,1,1.5,9.2.2,Sorts,"H4.1, H4.2"
2018,19,,1,1.5,9.2.2,Algorithm (element deletion from array),H4.2
2018,20,,1,1.5,9.2.2,Drivers,H4.3
2018,22,a,3,4.5,9.2.2,Desk checking an Algorithm,H4.3
2018,22,c,3,4.5,9.2.2,Modifty an algorithm - Error correction,H4.2
2018,24,a,2,3,9.2.2,Purpose of a particular piece of code,H4.2
2018,24,b,3,4.5,9.2.2,Modify an algorithm,H4.2
2018,28,a,2,3,9.2.2,Design appropriate data structure,H1.3
2018,28,b,4,6,9.2.2,Produce system documentation,H5.2
2018,28,c,4,6,9.2.2,Define data validation procedure,H4.2
2018,30,,5,7.5,9.2.2,Design an algorithm,H4.3
2017,11,,1,1.5,9.2.2,Sentinel values,H4.2
2017,12,,1,1.5,9.2.2,Event driven vs sequential,H1.2
2017,14,,1,1.5,9.2.2,Sort methods,H4.2
2017,15,,1,1.5,9.2.2,Sequential / relative files,"H1.2, H4.2"
2017,16,,1,1.5,9.2.2,System documentation,H5.2
2017,17,,1,1.5,9.2.2,Algorithm output,H4.2
2017,18,,1,1.5,9.2.2,Algorithm comparison,H4.2
2017,19,,1,1.5,9.2.2,Algorithm: Subroutine call,H4.3
2017,20,,1,1.5,9.2.2,Local/global variables,"H4.2, H4.3"
2017,22,,3,4.5,9.2.2,System documentation,H5.2
2017,23,b,3,4.5,9.2.2,System documentation,H5.2
2017,25,,3,4.5,9.2.2,Choosing a language,H2.1
2017,28,a,3,4.5,9.2.2,Desk check,H4.2
2017,28,b,2,3,9.2.2,Error correction,H4.2
2017,28,c,3,4.5,9.2.2,Search methods,H4.2
2017,32,,4,6,9.2.2,Algorithm design,H4.2
2017,33,b(ii),4,6,9.2.2,Algorithm design,H4.2
2016,7,,1,1.5,9.2.2,System documentation,H5.2
2016,11,,1,1.5,9.2.2,Flowchart vs pseudocode,H4.2
2016,13,,1,1.5,9.2.2,Identifying a sort,H1.3
2016,15,,1,1.5,9.2.2,Analysis of algorithm,H4.2
2016,16,,1,1.5,9.2.2,Subroutine calls,H4.3
2016,18,,1,1.5,9.2.2,Insertion algorithm,H4.3
2016,23,,4,6,9.2.2,Interface design  screen elements,H6.4
2016,24,a,3,4.5,9.2.2,Errors in algorithm,H4.2
2016,24,b,2,3,9.2.2,Complete an algorithm,H4.2
2016,26,a,3,4.5,9.2.2,Data types,"H6.3, H6.4"
2016,26,b,3,4.5,"9.2.2, 9.2.5",Maintenance,H5.1
2016,28,,3,4.5,9.2.2,Data structures,H4.2
2016,29,b,4,6,9.2.2,Scenario  system documentation,"H6.3, H6.4"
2016,30,,3,4.5,9.2.2,Search and sort,H1.3
2016,31,,4,6,9.2.2,Algorithm design - 2D matrix array,H4.2
2016,33,,5,7.5,9.2.3,Algorithm design - sequential file,H4.2
2015,2,,1,1.5,9.2.2,Screen elements,H6.4
2015,6,,1,1.5,9.2.2,Pseudocode output,H4.3
2015,9,,1,1.5,9.2.2,Data types / purpose,H1.2
2015,11,,1,1.5,9.2.2,Flowchart control structures,H5.1
2015,12,,1,1.5,9.2.2,Flowchart output,H4.3
2015,16,,1,1.5,9.2.2,Completing an algorithm,H5.3
2015,17,,1,1.5,9.2.2,Sort types,H1.2
2015,18,,1,1.5,9.2.2,Replacing a WHILE loop,H4.2
2015,19,,1,1.5,9.2.2,Data types in an array,H1.3
2015,23,a,3,4.5,9.2.2,Documentation for library routine,H4.2
2015,23,b,4,6,9.2.2,Use documented subroutines in an algorithm.,H6.1
2015,26,,4,6,9.2.2,Linear search for a unique element,H4.2
2015,29,a,2,3,9.2.2,Algorithm module interpretation,H4.1
2015,30,b,3,4.5,9.2.2,Planning and designing a solution (sorting),"H4.2, H4.3"
2015,31,a,3,4.5,9.2.2,Desk checking an algorithm,H4.2
2015,31,b,3,4.5,9.2.2,Algorithm: Error correction,H4.2
2015,31,c,3,4.5,9.2.2,Test data,H4.2
2014,4,,1,1.5,9.2.2,sequential and relative files,H1.3
2014,5,,1,1.5,9.2.2,algorithm needs to be tested for logic errors,"H4.2, H4.3"
2014,10,,1,1.5,9.2.2,efficient search,"H1.3, H4.3"
2014,11,,1,1.5,9.2.2,systems modelling tools,H5.2
2014,15,,1,1.5,9.2.2,pseudocode and flow chart,"H4.2, H1.2"
2014,17,,1,1.5,9.2.2,function,"H1.3, H4.2"
2014,19,,1,1.5,9.2.2,assembly language instructions,H1.3
2014,24,,3,4.5,9.2.2,sequential and event-driven approaches,H4.2
2014,30,,4,6,9.2.2,Write an algorithm,H4.3
2014,31,a,2,3,9.2.2,arrays of records,H1.3
2014,31,b,3,4.5,9.2.2,steps in an algorithm,H4.2
2014,34,a,2,3,9.2.2,test an algorithm,H4.3
2014,34,b,2,3,9.2.2,Modify an algorithm,H4.3
2013,1,,1,1.5,9.2.2,desk check,H1.3
2013,6,,1,1.5,9.2.2,software development cycle,H4.3
2013,12,,1,1.5,9.2.2,test an algorithm,H1.3
2013,13,,1,1.5,9.2.2,scope of variables,H4.3
2013,17,,1,1.5,9.2.2,binary search algorithm,H5.2
2013,21,,3,4.5,9.2.2,well-designed data input interface,H6.4
2013,24,b,4,6,9.2.2,storyboard,H6.4
2013,27,a,2,3,9.2.2,Write an algorithm,H4.2
2013,27,b,3,4.5,9.2.2,Explain an algorithm,H1.3
2013,28,a,3,4.5,9.2.2,Desk check an algorithm,H1.3. H4.2
2013,28,b,3,4.5,9.2.2,BubbleSort,H4.3
2013,29,b,3,4.5,9.2.2,structure chart,H4.3
2013,31,a,2,3,9.2.2,fix an algorithm,H4.2
2013,31,b,3,4.5,9.2.2,Write an algorithm,H4.3
2012,1,,1,1.5,9.2.2,desk check output from an algorithm,H4.2
2012,2,,1,1.5,9.2.2,user interface,H6.4
2012,4,,1,1.5,9.2.2,system modelling tools,H5.2
2012,8,,1,1.5,9.2.2,Control structures,H4.2
2012,9,,1,1.5,9.2.2,sorting algorithm,H1.3
2012,10,,1,1.5,9.2.2,data structure,H4.2
2012,11,,1,1.5,9.2.2,control structure,H4.2
2012,14,,1,1.5,9.2.2,search method,H1.3
2012,17,,1,1.5,9.2.2,understand an algorithm,H4.2
2012,23,a,4,6,"9.2.1, 9.2.2",storyboard,"H1.2, H4.2"
2012,23,b,3,4.5,"9.2.1, 9.2.2, 9.3",data flow diagram,"H1.2, H4.2"
2012,24,,4,6,9.2.2,Write an algorithm:  two-dimensional array,"H3.2, H4.2"
2012,26,c,4,6,9.2.2,design an algorithm,"H1.1, H1.3, H4.2"
2012,28,a,3,4.5,9.2.2,write a swap algorithm,H1.3
2012,28,b,4,6,9.2.2,design an algorithm,"H4.2, H5.2, H6.4"
2012,29,,4,6,9.2.2,development plan,"H4.2, H5.1, H5.2"
2012,30,b,3,4.5,9.2.2,Write an algorithm,"H1.3, H4.2"
2012,30,c,2,3,9.2.2,data structure,"H1.3, H4.2"
2011,2,,1,1.5,9.2.2,structure chart,H1.3
2011,7,,1,1.5,9.2.2,fix an algorithm,H4.3
2011,8,,1,1.5,9.2.2,system modelling tools,H1.2
2011,13,,1,1.5,9.2.2,system flowchart,"H1.3, H6.2"
2011,16,,1,1.5,9.2.2,sorting method,H1.3
2011,19,,1,1.5,9.2.2,binary search,H1.3
2011,21,,4,6,"9.1.2, 9.2.2 , 9.2.3, 9.2.4, 9.2.5, 9.3",CASE tools,"H4.2, H5.1"
2011,22,a,4,6,9.2.2,data flow diagram,H5.2
2011,22,c,2,3,9.2.2,sequential and random files,"H1.1, H1.3"
2011,29,a,4,6,9.2.2,Design an algorithm,"H1.3, H4.2, H4.3"
2011,29,b,4,6,9.2.2,Write an algorithm,"H1.3, H4.2, H4.3"
2010,3,,1,1.5,9.2.2,test an algorithm,H4.3
2010,13,,1,1.5,9.2.2,data structure,"H1.3, H4.2"
2010,14,,1,1.5,9.2.2,data type,H4.3
2010,15,,1,1.5,9.2.2,test an algorithm,H4.3
2010,20,,1,1.5,"9.2.2, 9.3",test an algorithm,H1.3
2010,21,b,3,4.5,"9.2.2 , 9.2.3",modular approach,H4.3
2010,21,c(i),2,3,9.2.2,library routines,"H5.3, H4.2"
2010,21,c(ii),3,4.5,9.2.2,library routines,"H5.3, H4.2"
2010,21,d(iii),3,4.5,"9.2.2 , 9.2.3",sequential and event-driven approaches,"H4.2, H5.3"
2010,22,a,2,3,9.2.2,designing a set of test data to desk check an algorithm,H4.2
2010,22,b(i),5,7.5,"9.2.2 , 9.2.3, 9.3",Write an algorithm,"H4.2, H4.3"
2010,22,b(ii),3,4.5,9.2.2,test an algorithm,"H4.2, H4.3, H1.1"
2010,22,c(i),3,4.5,"9.2.2 , 9.2.3",swap algorithm,"H1.1, H1.3, H4.2"
2010,22,c(ii),3,4.5,9.2.2,insertion sort,H4.2 
2010,23,d(i),2,3,9.2.2,data structure,H1.3
2010,23,d(iii),4,6," 9.2.2, 9.3",structure diagram,H5.2
2021,32,,4,6,9.2.3,Fetchexecute cycle,"H1.1, H1.3"
2020,2,,1,1.5,9.2.3,Program documentation,H5.2
2020,8,,1,1.5,9.2.3,Types of error,H4.2
2020,10,,1,1.5,9.2.3,Metalanguage,H4.2
2020,12,,1,1.5,9.2.3,Railroad diagram and EBNF,H4.2
2020,16,,1,1.5,9.2.3,Dynamic link libraries,H4.2
2020,19,,1,1.5,9.2.3,Fetch  Execute cycle  code interpretation,H1.3
2020,20,,1,1.5,9.2.3,Fetch  Execute cycle  program counter,H1.3
2020,23,,4,6,9.2.3,Interpretation and compilation,H1.2
2020,25,(a),2,3,9.2.3,Use of stubs,H4.2
2020,27,(b),4,6,9.2.3,Debugging methods,H4.2
2020,28,,3,4.5,9.2.3,Metalanguage,H4.2
2019,8,,1,1.5,9.2.3,Use of flags,H4.2
2019,9,,1,1.5,9.2.3,Compilation/interpretation,H4.2
2019,12,,1,1.5,9.2.3,Fetch-execute cycle,H1.3
2019,17,,1,1.5,9.2.3,Syntax (English to EBNF) ,H4.2
2019,27,(b),3,4.5,"9.2.2, 9.2.3",Choosing a programming language,H2.1
2019,29,(a),3,4.5,9.2.3,Sorting subroutine  debugging methods,H4.2
2018,3,,1,1.5,9.2.3,Error types,H4.2
2018,10,,1,1.5,9.2.3,Stubs,H5.1
2018,12,,1,1.5,9.2.3,Language syntax,H4.2
2018,16,,1,1.5,9.2.3,Fetch-execute cycle,H1.3
2018,17,,1,1.5,9.2.3,Control Structure / interpreting algorithm,H4.2
2018,22,(b),3,4.5,9.2.3,Debugging techniques other than deskcheck,H5.3
2018,23,(b),3,4.5,9.2.3,User documentation,"H5.2, H6.2"
2018,27,,4,6,9.2.3,EBNF Syntax diagram: explain why and where code will result in syntax error,"H1.2, H4.2"
2018,29,,3,4.5,9.2.3,Translation process,H1.1
2017,2,,1,1.5,9.2.3,Control structures,H4.2
2017,3,,1,1.5,9.2.3,User documentation,H5.2
2017,4,,1,1.5,9.2.3,Syntax diagrams,H2.1
2017,7,,1,1.5,9.2.3,Error types,H4.2
2017,13,,1,1.5,9.2.3,Translation,H1.2
2017,30,,3,4.5,9.2.3,Fetch-execute cycle,"H1.1, H1.3"
2017,31,,3,4.5,9.2.3,EBNF Statements,"H2.1, H4.2"
2016,14,,1,1.5,9.2.3,Compiler vs interpreter,"H1.2, H4.2"
2016,19,,1,1.5,9.2.3,Machine code fragment  interpretation,"H1.1, H1.3"
2016,20,,1,1.5,9.2.3,Machine code fragment  use of register,"H1.1, H1.3"
2016,27,,4,6,9.2.3,Debugging tools,H5.3
2015,9,,1,1.5,9.2.3,Purpose of DLL,H4.3
2015,13,,1,1.5,9.2.3,Fetch-execute cycle,H1.1
2015,14,,1,1.5,9.2.3,Metalanguages,H2.1
2015,17,,1,1.5,9.2.3,Metalanguages,H2.1
2015,24,,3,4.5,9.2.3,Runtime errors,H1.1
2015,29,(b),3,4.5,9.2.3,Use of stubs,H5.3
2015,32,,4,6,9.2.3,Algorithm design,H4.2
2015,??,,4,6,9.2.3,Metalanguages  design for a control structure,H2.1
2014,3,,1,1.5,9.2.3,documentation,"H5.2, H6.2"
2014,7,,1,1.5,9.2.3,variable,H4.2
2014,8,,1,1.5,9.2.3,Translation,"H1.2, H1.3"
2014,13,,1,1.5,9.2.3,program trace,"H4.2, H5.3"
2014,14,,1,1.5,9.2.3,EBNF Statements,"H1.2, H1.3"
2014,16,,1,1.5,9.2.3,Translation,H1.3
2014,20,,1,1.5,9.2.3,Sorting methods,"H1.1, H1.3"
2014,27,(a),3,4.5,9.2.3,COTS,H4.3
2014,32,,3,4.5,9.2.3,Railroad diagram,H4.2
2014,33,,4,6,9.2.3,Write an algorithm,"H4.2, H4.3"
2013,10,,1,1.5,9.2.3,coding errors,H4.2
2013,15,,1,1.5,9.2.3,EBNF/Railroad,H1.2
2013,20,,1,1.5,9.2.3,assembly language,"H1.3, H1.1"
2013,30,(b),3,4.5,"9.2.1, 9.2.3",specifications,"H4.3, H5.2"
2012,3,,1,1.5,9.2.3,CPU,H1.3
2012,12,,1,1.5,9.2.3,error types,"H1.1, H1.3"
2012,16,,1,1.5,9.2.3,Compilation/interpretation,"H1.1, H1.3"
2012,19,,1,1.5,9.2.3,EBNF,H1.2
2012,22,(a),2,3,9.2.3,Algorithm maintainability,"H4.3, H5.2"
2012,22,(b),1,1.5,9.2.3,desk check test data in an algorithm,H4.2
2012,22,(c),3,4.5,9.2.3,efficiency of algorithm,"H4.2, H4.3"
2012,30,(a),2,3,"9.2.1, 9.2.3",logic error in algorithm,H3.2
2011,3,,1,1.5,9.2.3,metalanguage,H1.3
2011,4,,1,1.5,9.2.3,program counter,H1.1
2011,5,,1,1.5,9.2.3,Translation,H1.1
2011,9,,1,1.5,9.2.3,Fetch-execute cycle,H1.1
2011,14,,1,1.5,9.2.3,documentation,"H1.2, H5.2"
2011,15,,1,1.5,9.2.3,desk check output from algorithm,"H4.2, H4.3"
2011,17,,1,1.5,9.2.3,two-dimensional array,H1.3
2011,18,,1,1.5,9.2.3,two-dimensional array Algorithm - calculation,H1.2
2011,20,,1,1.5,9.2.3,compilation,"H1.3, H4.2"
2011,21,,4,6,9.2.3 +5 ,CASE tools,"H4.2, H5.1"
2011,22,(b),2,3,9.2.3,data dictionary,H5.2
2011,23,,3,4.5,9.2.3,locating errors,"H4.3, H5.2"
2011,26,(a),2,3,9.2.3,desk check an algorithm to locate logic errors,H4.2
2011,27,(b),3,4.5,9.2.3,distributing routines in compiled form,"H1.1, H1.2, H3.1"
2011,30,,3,4.5,9.2.3,EBNF,H1.2
2011,31,,3,4.5,"9.2.3, 9.2.4",algorithm performance,H4.3
2011,32,,3,4.5,9.2.3,complilation,H1.1
2010,4,,1,1.5,9.2.3,metalanguage,"H4.3, H5.2"
2010,9,,1,1.5,9.2.3,Documentation,H1.2
2010,11,,1,1.5,9.2.3,"CPU, RAM",H1.3
2010,12,,1,1.5,9.2.3,breakpoint,"H1.2, H4.2"
2010,17,,1,1.5,9.2.3,compilation,"H1.1, H1.3"
2010,18,,1,1.5,9.2.3,error types,H1.3
2010,19,,1,1.5,9.2.3,translation,"H1.1, H1.2"
2010,21,(b),3,4.5,"9.2.2, 9.2.3",modular approach,H4.3
2010,21,(d) (ii),3,4.5,9.2.3,documentation,H5.2
2010,21,(d) (iii),3,4.5,"9.2.2, 9.2.3",approaches ,"H4.2, H5.3"
2010,22,(b) (i),5,7.5,"9.2.2, 9.2.3, 9.3",Write an algorithm,"H4.2, H4.3"
2010,22,(b) (ii),3,4.5,9.2.3,desk check,"H4.2, H4.3, H1.1"
2010,22,(c) (i),3,4.5,9.2.3,Swap algorithm,"H1.1, H1.3, H4.2"
2010,23,(c) (i),2,3,9.2.3,fetch-execute cycle,H1.3
2010,23,(c) (ii),2,3,9.2.3,Assembler code,H1.3
2010,23,(d) (ii),3,4.5,9.2.3,interface design,H6.4
2021,22,,3,4.5,9.2.4,Methods of testing,"H4.2, H5.1"
2020,9,,1,1.5,9.2.4,Levels of testing and use of driver,H4.2
2020,21,(d),3,4.5,9.2.4,Benchmarking,H5.2
2020,26,(b),3,4.5,9.2.4,Test data,H4.2
2019,2,,1,1.5,9.2.4,Volume testing,H4.2
2019,4,,1,1.5,9.2.4,Post-implementation review,H5.2
2019,14,,1,1.5,9.2.4,Test data,H4.2
2019,25,b,3,4.5,9.2.4,Software evaluation,"H4.3, H5.1"
2018,2,,1,1.5,9.2.4,Test data,H4.2
2018,11,,1,1.5,"9.2.2, 9.2.4",Benchmarking,H4.2
2018,15,,1,1.5,9.2.4,Testing,"H4.2, H4.3"
2018,23,c,3,4.5,"9.2.1, 9.2.4",Testing / quality assurance,H4.3
2018,26,,3,4.5,9.2.4,Importance of live and volume testing,H5.1
2017,21,,3,4.5,9.2.4,Testing report,H5.2
2016,8,,1,1.5,9.2.4,Quality assurance criteria,"H3.2, H5.1"
2016,22,,3,4.5,"9.1.1, 9.2.4",Response times,H2.2
2015,12,,1,1.5,9.2.4,Test data design,H4.2
2015,20,,1,1.5,9.2.4,Driver to test module,H5.3
2015,22,,4,6,9.2.4,Describe the types of testing,H4.2
2014,6,,1,1.5,9.2.4,Testing documentation,"H5.2, H5.3"
2014,29,,3,4.5,9.2.4,Testing levels,"H4.2, H4.3"
2013,16,,1,1.5,9.2.4,Acceptance testing,"H4.2, H4.3"
2013,18,,1,1.5,9.2.4,subroutine testing,H4.3
2013,19,,1,1.5,9.2.4,reason for modifying code,H4.3
2013,29,a,3,4.5,9.2.4,locating an error,H4.3
2012,13,,1,1.5,9.2.4,Benchmarking,H5.2
2012,26,a,2,3,9.2.4,driver,H4.2
2012,26,b,3,4.5,9.2.4,Test data,H4.2
2011,11,,1,1.5,9.2.4,Test boundaries,H4.2
2011,12,,1,1.5,9.2.4,Benchmarking,H4.2
2011,21,,4,6,"9.1.1, 9.2.2, 9.2.3, 9.2.4, 9.2.5, 9.3",CASE tools,"H4.2, H5.1"
2011,25,,3,4.5,9.2.4,Test data,H4.3
2011,26,b,3,4.5,9.2.4,Logic errors,H4.3
2011,31,,3,4.5,"9.2.3, 9.2.4",Performance,H4.3
2010,8,,1,1.5,9.2.4,Performance Monitoring,"H4.2, H5.1"
2010,23,b,4,6,9.2.4,Testing levels,H4.2
2020,13,,1,1.5,9.2.5,Maintenance,H4.2
2019,25,c,3,4.5,9.2.5,Maintenance,"H4.2, H5.1"
2018,4,,1,1.5,9.2.5,Maintenance,H4.3
2017,26,,3,4.5,9.2.5,Maintenance,"H4.2, H4.3"
2016,26,b,3,4.5,"9.2.2, 9.2.5",Maintenance,H5.1
2015,5,,1,1.5,9.2.5,Maintenance / documentation,"H5.2, H6.1"
2015,21,,2,3,9.2.5,Reasons for maintenance,H5.1
2014,25,,4,6,9.2.5,efficient UI,H4.2
2014,27,b,3,4.5,9.2.5,maintenance issues,H3.1
2014,28,,3,4.5,9.2.5,modify an algorithm,H3.1
2013,8,,1,1.5,9.2.5,reasons for maintaining software,H5.2
2013,14,,1,1.5,9.2.5,reasons for maintaining software,H5.2
2011,6,,1,1.5,9.2.5,reasons for maintaining software,H4.2
2011,21,,4,6,"9.1.1, 9.2.2, 9.2.3, 9.2.4, 9.2.5, 9.3",CASE tools,"H4.2, H5.1"
2010,22,d,4,6,9.2.5,Maintenance techniques,"H5.2, H4.3"
2021,24,,3,4.5,9.3 ,Log books ,H5.2
2021,26,,4,6,9.3,Design an algorithm,H4.2
2021,30,,4,6,9.3,Design an algorithm,H4.2
2021,33,,5,7.5,9.3,Design an algorithm,H4.2
2020,21,(c),2,3,9.3,Project management  Gantt chart,H5.1
2020,24,(b),3,4.5,9.3,Documentation  storyboard,H5.2
2020,26,(c),4,6,9.3,Validation subroutine,H4.2
2020,27,(c),5,7.5,9.3,Algorithm design,H4.2
2019,27,c,3,4.5,"9.3, 9.1.2",Team of developers vs single developer,H6.3
2018,23,a,3,4.5,9.3 ,Project management,"H5.1, H6.3"
2017,23,c,3,4.5,9.3 ,Project management,H5.1
2016,25,a,2,3,9.3,Purpose(s) of logbooks,H5.1
2016,25,b,2,3,9.3,Project Management techniques,H5.1
2016,25,c,3,4.5,"9.2.1, 9.3",Communication skills,H6.1
2015,10,,1,1.5,9.3 ,Project management,H6.2
2014,23,,4,6,9.3 ,project management tools,"H5.1, H2.1"
2013,3,,1,1.5,9.3,project management,H5.2
2013,9,,1,1.5,"9.2.1, 9.3",prooject management documentation,H5.2
2013,22,b,4,6,9.3,documenmtation DFD,H4.2
2013,25,b,4,6,9.3,agile approaach,"H1.3, H6.4"
2012,20,,1,1.5,9.3,data validation,"H1.3, H4.3"
2012,23,b,3,4.5,"9.2.1, 9.2.2, 9.3",data flow diagram,"H1.2, H4.2"
2011,21,,4,6,"9.1.1, 9.2.2, 9.2.3, 9.2.4, 9.2.5, 9.3",CASE tools,"H4.2, H5.1"
2010,1,,1,1.5,9.3,Gantt chart,H1.2
2010,6,,1,1.5,9.3,"test data, software development cycle",H1.2
2010,20,,1,1.5,"9.2.2, 9.3",Desk check,H1.3
2010,22,b(i),5,7.5," 9.2.2, 9.2.3, 9.3",Write an algorithm,"H4.2, H4.3"
2010,23,a,3,4.5,9.3,Project management tools,"H5.3, H6.3"
2010,23,d(ii),3,4.5,"9.2.3, 9.3",interface design,H6.4
2010,23,d(iii),4,6,"9.2.2, 9.3",Structure diagram,H5.2
2021,34, (a) (i),3,4.5,9.4.1, OOP classes and attributes,H4.2
2021,34, (a) (ii),3,4.5,9.4.1, OOP methods,H4.2
2021,34, (a) (iii),3,4.5,9.4.1, Artificial intelligence,H2.2
2021,34, (b) (i),2,3,9.4.1, LOGIC query,H4.2
2021,34, (b) (ii),2,3,9.4.1, LOGIC rule,H4.2
2021,34, (b) (iii),3,4.5,9.4.1, LOGIC chaining,H4.2
2021,34, (c),4,6,9.4.1, Choice of paradigm,"H2.1, H4.1, H5.3"
2020,29,(a),3,4.5,9.4.1,OOP  games,H4.2
2020,29,(b) (i),3,4.5,9.4.1,Logic programming,H2.1
2020,29,(b) (ii),3,4.5,9.4.1,Logic programming,H4.2
2020,29,(c),3,4.5,9.4.1,Imperative vs logic  expert system,H4.2
2020,29,(d),3,4.5,9.4.1,OOP  encapsulation,H4.2
2020,29,(e) (i),3,4.5,9.4.1,OOP  polymorphism,H2.1
2020,29,(e) (ii),2,3,9.4.1,OOP  method,H2.1
2019,31,a,2,3,9.4.1,Implication of OOP for testing/maintenance,"H1.2, H2.1"
2019,31,b(i),4,6,9.4.1,OOP -Distinguish between inheritance and polymorphism,"H1.2, H2.1"
2019,31,b(ii),2,3,9.4.1,Modify OOP code,H4.2
2019,31,c(i),3,4.5,9.4.1,"LOGIC Paradigm Distinguish between facts, rules and queries",H4.1
2019,31,c(ii),3,4.5,9.4.1,LOGIC Paradigm  Use of pattern matching in described system,H4.2
2019,31,d,3,4.5,9.4.1,LOGIC Paradigm  Use of AI,H4.2
2019,31,e,3,4.5,9.4.1,Current role of the imperative paradigm,"H2.1, H4.1"
2018,31,a,3,4.5,9.4.1,OOP encapsulation,"H2.1, H4.2"
2018,31,b(i),3,4.5,9.4.1,LOGIC Paradigm  expanding code,H4.2
2018,31,b(ii),3,4.5,9.4.1,LOGIC Paradigm  evaluating query,H4.2
2018,31,c,3,4.5,9.4.1,Reasons for paradigm development,"H2.1, H4.2"
2018,31,d,2,3,9.4.1,LOGIC Paradigm Heuristics,H1.2
2018,31,e(i),3,4.5,9.4.1,OOP modifying code  inheritance,H4.2
2018,31,e(ii),3,4.5,9.4.1,OOP polymorphism,H4.2
2017,34,a,2,3,9.4.1,OOP polymorphism,H2.1
2017,34,b(i),3,4.5,9.4.1,OOP declarations,H4.2
2017,34,b(ii),2,3,9.4.1,OOP attributes,H4.2
2017,34,b(iii),4,6,9.4.1,OOP subclass,H4.2
2017,34,c,4,6,9.4.1,Paradigm comparison,H5.3
2017,34,d(i),3,4.5,9.4.1,LOGIC Paradigm Chaining,H4.2
2017,34,d(ii),2,3,9.4.1,LOGIC Paradigm  LOGIC rule,H4.2
2016,34,a,2,3,9.4.1,LOGIC Paradigm  Definition of an expert system,H1.2
2016,34,b,4,6,9.4.1,Comparing paradigms,"H1.2, H2.1"
2016,34,c(i),3,4.5,9.4.1,Extending LOGIC code,H1.2
2016,34,c(ii),3,4.5,9.4.1,Evaluating a LOGIC rule,"H1.2, H2.1"
2016,34,d(i),2,3,9.4.1,Modifying some OOP code,H1.2
2016,34,d(ii),4,6,9.4.1,Producing some OOP code (instantiation),H1.2
2016,34,d(iii),2,3,9.4.1,Producing some OOP code (method),H1.2
2015,33,a,4,6,9.4.1,Justify paradigms,"H1.2, H2.1, H4.1"
2015,33,b,2,3,9.4.1,LOGIC Paradigm Heuristics,"H1.2, H4.1"
2015,33,c(i),2,3,9.4.1,Modify LOGIC fragment,"H1.2, H4.1"
2015,33,c(ii),2,3,9.4.1,Interpret LOGIC code,"H1.2, H4.1"
2015,33,d(i),4,6,9.4.1,OOP - Polymorphism and inheritance,"H1.2, H4.1"
2015,33,d(ii),3,4.5,9.4.1,Modify OOP fragment,"H1.2, H4.1"
2015,33,e,3,4.5,9.4.1,OOP - Encapsulation,H4.2
2014,35,a(i),3,4.5,9.4.1,strengths of the LOGIC paradigm,H2.1
2014,35,a(ii),3,4.5,9.4.1,strengths of the OOP paradigm,H2.1
2014,35,b,2,3,9.4.1,OOP Method,"H2.1, H4.2"
2014,35,c(i),2,3,9.4.1,OOP Class,"H2.1, H4.2"
2014,35,c(ii),3,4.5,9.4.1,Interpret OOP code,"H2.1, H4.2"
2014,35,d(i),3,4.5,9.4.1,Extending LOGIC code,"H2.1, H4.2"
2014,35,d(ii),4,6,9.4.1,LOGIC Paradigm Chaining,"H2.1, H4.2"
2013,32,a(i),2,3,9.4.1,OOP Attribute and Method,H1.2
2013,32,a(ii),2,3,9.4.1,Extending OOP code,H1.2
2013,32,a(iii),3,4.5,9.4.1,OOP - Encapsulation,"H4.1, H4.2"
2013,32,b(i),3,4.5,9.4.1,limitations of using the imperative approach,H1.2
2013,32,b(ii),3,4.5,9.4.1,LOGIC Paradigm - Inference Engine,H4.2
2013,32,b(iii),4,6,9.4.1,Extending LOGIC code,H1.2
2013,32,c,3,4.5,9.4.1,LOGIC and OOP paradigms,H5.3
2012,31,a,3,4.5,9.4.1,Limitations of the imperative paradigm,"H1.2, H2.1, H5.3 "
2012,31,b(i),2,3,9.4.1,LOGIC Paradigm Chaining,H4.2
2012,31,b(ii),3,4.5,9.4.1,LOGIC Paradigm  expanding code,H4.2
2012,31,c(i),2,3,9.4.1,OOP - Class and method,H4.2
2012,31,c(ii),2,3,9.4.1,Modify OOP fragment with method,H4.2
2012,31,c(iii),4,6,9.4.1,Modify OOP fragment with Polymorphism,H4.2
2012,31,d,4,6,9.4.1,Combination of paradigms,"H1.2, H2.2, H4.1, H4.2 "
,,,,,,,
